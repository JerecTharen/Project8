{"version":3,"sources":["Services/ShoppingService.js","Components/Product.js","Components/FilterForm.js","Components/ProductList.js","Components/CartProduct.js","Components/Cart.js","Components/ProductDisplay.js","App.js","serviceWorker.js","index.js"],"names":["store","createStore","state","action","type","inCart","cart","forEach","item","id","map","amount","newItem","concat","filter","Product","displayProduct","redUrl","_this","props","itemId","history","push","react_default","a","createElement","onClick","this","className","src","img","alt","title","price","rating","React","Component","FilterForm","runUpdateFilter","filterString","document","getElementById","value","changeFilter","clearFilter","ProductList","allProducts","updateFilterString","newString","setState","prodRedirect","console","log","productRedirect","_this2","fetch","then","result","json","productResult","list","_this3","length","product","includes","Components_Product","key","prodRed","Components_FilterForm","CartProduct","removeFromCart","Store","dispatch","updateCart","newQuant","cartItem","htmlFor","name","placeholder","Cart","cartItems","getState","Components_CartProduct","ProductDisplay","addToCart","Number","match","params","productId","prodAmount","App","subscribe","forceUpdate","react_router_dom","to","react_router","path","exact","render","_ref","Components_ProductList","_ref2","Components_Cart","_ref3","Components_ProductDisplay","Boolean","window","location","hostname","ReactDOM","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7bf7927.chunk.js","sourcesContent":["import { createStore } from 'redux';\n\n\nconst initialState = {cart: []};\n\nfunction reducer(state, action){\n\n    if (action.type === 'ADD_TO_CART') {\n        // console.log('in add to cart');\n        let inCart = false;\n        state.cart.forEach((item)=>{\n            // console.log('in iteration for', item);\n            // console.log(item.id === action.item.id);\n            if(item.id === action.item.id){\n                // console.log('in if');\n                inCart = true\n            }\n        });\n        if(!inCart){\n            // console.log('not in cart');\n            let newItem = action.item;\n            newItem.amount = 1;\n            return {\n                cart: state.cart.concat(newItem)\n            }\n        }\n        else{\n            // console.log('in cart');\n            let newCart = state.cart.map((item)=>{\n                if(item.id === action.item.id){\n                    item.amount++;\n                    return item;\n                }\n                else{\n                    return item;\n                }\n            });\n            return {\n                cart: newCart,\n            };\n        }\n\n    }\n    else if(action.type === 'UPDATE_AMOUNT'){\n        let newCart = state.cart.map((item)=>{\n            if(action.item.id === item.id){\n                let newItem = item;\n                newItem.amount = action.amount;\n                return newItem;\n            }\n            else return item;\n        });\n        return {cart: newCart};\n    }\n    else if(action.type === 'DELETE_FROM_CART'){\n        return{\n            cart: state.cart.filter((item=> (item.id !== action.id)))\n        }\n    }\n    else{\n        return state;\n    }\n}\n\n\nconst store = createStore(reducer, initialState);\n// console.log(store.getState());\nexport default store;\n","import React from 'react';\nimport '../Styles/Product.css';\n// import Store from '../Services/ShoppingService';\n// import {Redirect} from \"react-router-dom\";\n\nclass Product extends React.Component{\n    // store = Store.getState();\n\n    // componentDidMount() {\n    //   Store.subscribe(() => this.forceUpdate());\n    // }\n\n    displayProduct = ()=>{\n        // console.log(this.props.prodRed);\n        // let itemId = this.props.itemId;\n        // this.props.prodRed(itemId);\n        let redUrl = `/Project8/product/${this.props.itemId}`;\n        // console.log(redUrl);\n        // return <Redirect to={redUrl}/>\n        this.props.history.push(redUrl);\n    };\n\n    render() {\n        // console.log('props is:', this.props);\n        // console.log('testing: ', this.props.anotherTest, this.props.blue);\n        return (\n            <div onClick={this.displayProduct} className='product'>\n                <img src={this.props.img} alt={this.props.title} />\n                <h3>{this.props.title}</h3>\n                <p>Price: ${this.props.price}</p>\n                <p>Rating: {this.props.rating}</p>\n            </div>\n        )\n    }\n}\n\nexport default Product;\n","import React from 'react';\n\nclass FilterForm extends React.Component{\n\n    runUpdateFilter = ()=>{\n        // console.log('running update filter');\n        let filterString = document.getElementById('filter').value;\n        this.props.changeFilter(filterString);\n        // document.getElementById('fliter').value = '';\n    };\n\n    clearFilter = ()=>{\n        document.getElementById('filter').value = '';\n        this.props.changeFilter('');\n    };\n\n    render() {\n        return (\n            <div className='filterForm'>\n                <input type='text' id='filter' />\n                <button onClick={this.runUpdateFilter}>SUBMIT</button>\n                <button onClick={this.clearFilter}>CLEAR</button>\n            </div>\n        )\n    }\n}\n\nexport default FilterForm;\n","import React from 'react';\nimport '../Styles/ProductList.css';\n\nimport Product from './Product';\nimport FilterForm from './FilterForm';\n\nclass ProductList extends React.Component{\n\n    state = {\n        allProducts: [],\n        filterString: '',\n    };\n\n    updateFilterString = (newString)=>{\n        // console.log('updating state', newString);\n        this.setState({filterString: newString});\n        // console.log('new state', this.state.filterString);\n    };\n\n    // getProducts = ()=>{\n    //     fetch('https://my-json-server.typicode.com/tdmichaelis/typicode/products').then((result)=> result.json())\n    //         .then((productResult)=>{\n    //             // console.log(productResult);\n    //             this.setState({allProducts: productResult});\n    //         });\n    // };\n\n    componentWillMount() {\n        fetch('https://my-json-server.typicode.com/tdmichaelis/typicode/products').then((result)=> result.json())\n            .then((productResult)=>{\n                // console.log(productResult);\n                this.setState({allProducts: productResult});\n            });\n    }\n\n    prodRedirect = (itemId)=>{\n        console.log(itemId);\n        this.props.productRedirect(itemId);\n    };\n\n    render() {\n        // console.log(this.props.productRedirect);\n        // console.log(this.props.myTest);\n        // console.log('props is: ', this.props);\n        // console.log('newProps is: ', newProps);\n        // console.log(this.props.history);\n        let list;\n        if(this.state.allProducts.length > 0){\n            // console.log('in if statement', this.state.allProducts);\n            list = this.state.allProducts.map((product)=>{\n                if(this.state.filterString){\n                    // console.log('in if statement');\n                    if(product.title.includes(this.state.filterString)){\n                        return(\n                            <Product\n                                itemId={product.id}\n                                title={product.title}\n                                img={product.img}\n                                key={product.id}\n                                price={product.price}\n                                rating={product.rating}\n                                prodRed={this.prodRedirect}\n                                history={this.props.history}\n                            />\n                        )\n                    }\n                    else{\n                        return ''\n                    }\n                }\n                else{\n                    return(\n                        <Product\n                            itemId={product.id}\n                            title={product.title}\n                            img={product.img}\n                            key={product.id}\n                            price={product.price}\n                            rating={product.rating}\n                            prodRed={this.prodRedirect}\n                            history={this.props.history}\n                        />\n                    )\n                }\n            });\n            // console.log(list);\n        }\n        else{\n            list = <p>Sorry, but it appears we are out of stock! Check in later!</p>;\n            // this.getProducts();\n        }\n        return (\n            <div className='productList'>\n                <FilterForm changeFilter={this.updateFilterString} />\n                <div className='productDisplay'>\n                    {list}\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default ProductList;\n","import React from 'react';\nimport Store from '../Services/ShoppingService';\nimport '../Styles/CartProduct.css';\n// import {Redirect} from \"react-router-dom\";\n\nclass CartProduct extends React.Component{\n    // store = Store.getState();\n\n    // componentDidMount() {\n    //   Store.subscribe(() => this.forceUpdate());\n    // }\n\n    removeFromCart=(id)=>{\n        return ()=>{\n            Store.dispatch({\n                type: \"DELETE_FROM_CART\",\n                id: id,\n            });\n        }\n    };\n\n    updateCart = ()=>{\n        let newQuant = document.getElementById('newQuant').value;\n        Store.dispatch({\n            type: 'UPDATE_AMOUNT',\n            item: this.props.cartItem,\n            amount: newQuant,\n        });\n    };\n\n    displayProduct = ()=>{\n        // console.log(this.props.prodRed);\n        // let itemId = this.props.itemId;\n        // this.props.prodRed(itemId);\n        let redUrl = `/Project8/product/${this.props.cartItem.id}`;\n        // console.log(redUrl);\n        // return <Redirect to={redUrl}/>\n        this.props.history.push(redUrl);\n    };\n\n    render() {\n        // console.log('props is:', this.props);\n        // console.log('testing: ', this.props.anotherTest, this.props.blue);\n        return (\n            <div className='cartProduct'>\n                <img onClick={this.displayProduct} src={this.props.cartItem.img} alt={this.props.cartItem.title} />\n                <h3>{this.props.cartItem.title}</h3>\n                <p>Price: ${this.props.cartItem.price}</p>\n                <p>Rating: {this.props.cartItem.rating}</p>\n                <p>Quantity: {this.props.cartItem.amount}</p>\n                <div className='cartItemControls'>\n                    <label htmlFor='newQuant'>Quantity</label>\n                    <input type='number' name='newQuant' id='newQuant' placeholder={this.props.cartItem.amount} />\n                    <button onClick={this.updateCart}>UPDATE</button>\n                    <button onClick={this.removeFromCart(this.props.cartItem.id)}>DELETE</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CartProduct;\n","import React from 'react';\nimport '../Styles/ProductList.css';\n\nimport store from '../Services/ShoppingService';\nimport Product from './CartProduct';\n\nclass Cart extends React.Component{\n\n    componentDidMount() {\n        // store.subscribe(() => this.forceUpdate());\n\n    }\n\n    // state = store.getState();\n\n    render() {\n        // console.log(store.getState());\n        const state = store.getState();\n        let cartItems;\n        if(state.cart.length > 0){\n            cartItems = state.cart.map((cartItem)=>{\n                return <div key={cartItem.id}>\n                    <Product cartItem={cartItem} history={this.props.history} />\n                </div>\n            });\n        }\n        else{\n            cartItems = <h3>Your cart is empty. Please return to the product list page!</h3>\n        }\n        return(\n            <div className='cart'>\n                <h1>Shopping Cart</h1>\n                <div className='cartList'>\n                    {cartItems}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Cart;\n","import React from 'react';\nimport '../Styles/ProductDisplay.css';\n\nimport store from '../Services/ShoppingService';\n\nclass ProductDisplay extends React.Component{\n\n    state = {\n        product: null,\n        // theCart: store.getState(),\n    };\n\n    // theCart = store.getState();\n\n    componentWillMount() {\n        // store.subscribe(() => this.forceUpdate());\n        // console.log('hello there');\n        // this.state.\n        // store.subscribe(() => this.forceUpdate());\n        // console.log('in mount');\n        fetch('https://my-json-server.typicode.com/tdmichaelis/typicode/products').then((result)=> result.json())\n            .then((productResult)=>{\n                // console.log(productResult);\n                productResult.forEach((product)=>{\n                    // console.log(product);\n                    // console.log(typeof(this.props.match.params.productId));\n                    // console.log();\n                    if(product.id === Number(this.props.match.params.productId)){\n                        this.setState({product: product});\n                    }\n                });\n            });\n    }\n\n    componentWillUnmount() {\n        // store.unsubscribe();\n    }\n\n    // resetState=()=>{\n    //     let sameState = this.state.product;\n    //     this.setState({product: sameState});\n    // };\n\n    addToCart=()=>{\n        if(!this.inCart){\n            store.dispatch({\n                type: 'ADD_TO_CART',\n                item: this.state.product,\n            });\n        }\n        // this.resetState();\n    };\n\n    removeFromCart = ()=>{\n        store.dispatch({\n            type: 'DELETE_FROM_CART',\n            id: this.state.product.id,\n        });\n        // this.resetState();\n    };\n\n    updateCart = ()=>{\n        let newQuant = document.getElementById('newQuant').value;\n        store.dispatch({\n            type: 'UPDATE_AMOUNT',\n            item: this.state.product,\n            amount: newQuant,\n        });\n    };\n\n    render() {\n        let inCart = false;\n        let prodAmount = null;\n        const theCart = store.getState();\n        theCart.cart.forEach((item)=>{\n            // console.log('iterating for:', item);\n            // console.log(this.props.match.params.productId);\n            // console.log(item.id === Number(this.props.match.params.productId));\n            if(item.id === Number(this.props.match.params.productId)){\n                // console.log('in if statement');\n                inCart = true;\n                prodAmount = item.amount;\n            }\n        });\n      // console.log(this.theCart);\n        if(this.state.product && !inCart){\n            return (\n                <div className='productDisplay'>\n                    <h1>{this.state.product.title}</h1>\n                    <img id='prodDisplayImg' src={this.state.product.img} alt={this.state.product.title} />\n                    <h3>${this.state.product.price}</h3>\n                    <h3>Rating: {this.state.product.rating}</h3>\n                    <div className='controls'>\n                        <button onClick={this.addToCart}>ADD TO CART</button>\n                    </div>\n                </div>\n            )\n        }\n        else if(this.state.product && inCart){\n          return (\n            <div className='productDisplay'>\n              <h1>{this.state.product.title}</h1>\n              <img id='prodDisplayImg' src={this.state.product.img} alt={this.state.product.title} />\n              <h3>${this.state.product.price}</h3>\n              <h3>Rating: {this.state.product.rating}</h3>\n              <h3>Quantity: {prodAmount}</h3>\n              <div className='controls'>\n                <label htmlFor='newQuant'>New Quantity: </label>\n                <input type='number' name='newQuant' id='newQuant' placeholder={prodAmount} />\n                <button onClick={this.updateCart}>UPDATE</button>\n                <button onClick={this.removeFromCart}>REMOVE FROM CART</button>\n              </div>\n            </div>\n          )\n        }\n        else{\n            return(\n                <h1>We're sorry, there was an error loading this product.</h1>\n            )\n        }\n    }\n}\n\nexport default ProductDisplay;\n","import React, { Component } from 'react';\nimport Store from './Services/ShoppingService';\nimport { BrowserRouter as Router, Route, Link,} from \"react-router-dom\";\nimport './App.css';\n\n//components\nimport ProductList from './Components/ProductList';\nimport Cart from './Components/Cart';\nimport ProductDisplay from './Components/ProductDisplay';\n\n\nclass App extends Component {\n\n    componentDidMount() {\n            Store.subscribe(() => this.forceUpdate());\n    }\n\n    render() {\n      // console.log(store.state);\n    return (\n      <div className=\"App\">\n        <Router>\n            <ul className='navBar'>\n                <li><h1>E-Commerce</h1></li>\n                <li><Link to='/Project8/'>Product List</Link></li>\n                <li><Link to='/Project8/cart'>Shopping Cart</Link></li>\n\n            </ul>\n            <Route path='/Project8/' exact render={({history})=> <ProductList history={history} />} />\n            <Route path='/Project8/cart' render={({history})=> <Cart  history={history} />} />\n            <Route path='/Project8/product/:productId' render={({history, match})=> <ProductDisplay  history={history} match={match} />} />\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}